import numpy as np
import pandas as pd
from sklearn import metrics
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.ensemble import GradientBoostingRegressor
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")

X_train = pd.read_csv('data/training_data/X_train.csv')
X_train.drop('id', axis = 1, inplace=True)
y_train = pd.read_csv('data/training_data/y_train.csv')
y_train.drop('id', axis = 1, inplace=True)
X_test = pd.read_csv('data/test_data/X_test.csv')
X_test.drop('id', axis = 1, inplace=True)
y_test = pd.read_csv('data/test_data/y_test.csv')
y_test.drop('id', axis = 1, inplace=True)

#fill na training data
X_train = X_train.apply(lambda x: x.fillna(x.mean()),axis=0)
X_test = X_test.apply(lambda x: x.fillna(x.mean()),axis=0)

#drop variables that worsen prediction
X_train.drop(['s_storage_size', 's_duration'], axis = 1, inplace=True)
X_test.drop(['s_storage_size', 's_duration'], axis = 1, inplace=True)


gbr = GBR(n_estimators = 50, max_depth = 55, min_samples_split = 2,learning_rate=0.6,loss = 'ls')
gbr.fit(X_train, y_train)
y_pred = gbr.predict(X_test)


print('Best parameters found by grid search are:', gbr)
y_pred = gbr.predict(X_test)


# have a look at the results:
print('Mean Absolute Error: %.4f' %
      metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error: %.4f' % metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error: %.4f' %
      np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
print('R2 score:%.4f' % r2_score(y_test, y_pred))
